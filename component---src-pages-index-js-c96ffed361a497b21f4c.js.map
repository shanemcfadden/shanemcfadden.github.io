{"version":3,"sources":["webpack://github-homepage/./src/components/FadeInSection.jsx","webpack://github-homepage/./src/components/ProjectCard.jsx","webpack://github-homepage/./src/components/ProjectCards.jsx","webpack://github-homepage/./src/pages/index.js"],"names":["children","useState","isVisible","setIsVisible","domRef","useRef","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","ref","current","observe","unobserve","className","githubRepo","postmanDocs","siteLink","content","fadeIn","contentCard","dangerouslySetInnerHTML","__html","href","projectNodes","map","i","frontmatter","html","key","projects","data","allMarkdownRemark","nodes","filter","node","fileAbsolutePath","match","sort","a","b","orderIndex","PageLayout"],"mappings":"kLA8BA,EA5BsB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACvB,GAAkCC,eAAS,GAApCC,EAAP,KAAkBC,EAAlB,KACMC,GAASC,cAcf,OAZAC,gBAAU,WACR,IAAMC,EAAW,IAAIC,sBAAqB,SAACC,GACzCA,EAAQC,SAAQ,SAACC,IACVT,GAAaS,EAAMC,gBACtBT,GAAa,SAIbU,EAAMT,EAAOU,QAEnB,OADAP,EAASQ,QAAQF,GACV,kBAAMN,EAASS,UAAUH,MAC/B,CAACX,IAEF,uBACEe,UAAS,oBACPf,EAAY,2BAA6B,IAE3CW,IAAKT,GAEJJ,ICaP,EAnCoB,SAAC,GAMd,IALLkB,EAKI,EALJA,WACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,QAEI,IADJC,cACI,SACEC,EACJ,uBAAKN,UAAU,gBACb,uBAAKO,wBAAyB,CAAEC,OAAQJ,KACxC,uBAAKJ,UAAU,cACZG,GACC,qBAAGH,UAAU,SAASS,KAAMN,GAA5B,gBAIDD,GACC,qBAAGF,UAAU,SAASS,KAAMP,GAA5B,yBAIDD,GACC,qBAAGD,UAAU,wBAAwBS,KAAMR,GAA3C,oBASR,OAAII,EAAe,gBAAC,EAAD,KAAgBC,GAC5B,2BAAMA,ICZf,EApBqB,SAAC,GAAsB,IAApBI,EAAmB,EAAnBA,aACtB,OACE,gCACGA,EAAaC,KAAI,WAAwBC,GAAO,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,KACxBb,EAAsCY,EAAtCZ,WAAYC,EAA0BW,EAA1BX,YAAaC,EAAaU,EAAbV,SACjC,OACE,gBAAC,EAAD,CACEF,WAAYA,EACZE,SAAUA,EACVD,YAAaA,EACbE,QAASU,EACTC,IAAKH,EACLP,OAAQO,S,UCmBpB,EA7BkB,SAAC,GAAc,IAEzBI,EAFwB,EAAXC,KACQC,kBAAkBC,MAE1CC,QAAO,SAACC,GAAD,QAAYA,EAAKC,iBAAiBC,MAAM,4BAC/CC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEZ,YAAYc,WAAaD,EAAEb,YAAYc,cAC3D,OACE,gBAACC,EAAA,EAAD,KACE,gBAAC,EAAD,CAAclB,aAAcM","file":"component---src-pages-index-js-c96ffed361a497b21f4c.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst FadeInSection = ({ children }) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const domRef = useRef();\n\n  useEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (!isVisible && entry.isIntersecting) {\n          setIsVisible(true);\n        }\n      });\n    });\n    const ref = domRef.current;\n    observer.observe(ref);\n    return () => observer.unobserve(ref);\n  }, [isVisible]);\n  return (\n    <div\n      className={`fade-in-section ${\n        isVisible ? \"fade-in-section--visible\" : \"\"\n      }`}\n      ref={domRef}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default FadeInSection;\n","import React from \"react\";\nimport FadeInSection from \"./FadeInSection\";\n\nconst ProjectCard = ({\n  githubRepo,\n  postmanDocs,\n  siteLink,\n  content,\n  fadeIn = true,\n}) => {\n  const contentCard = (\n    <div className=\"content-card\">\n      <div dangerouslySetInnerHTML={{ __html: content }} />\n      <div className=\"button-row\">\n        {siteLink && (\n          <a className=\"button\" href={siteLink}>\n            Project Site\n          </a>\n        )}\n        {postmanDocs && (\n          <a className=\"button\" href={postmanDocs}>\n            Project Documentation\n          </a>\n        )}\n        {githubRepo && (\n          <a className=\"button button--github\" href={githubRepo}>\n            View on GitHub\n          </a>\n        )}\n      </div>\n    </div>\n  );\n\n  // Doesn't work when deployed. Will fix outside of business hours\n  if (fadeIn) return <FadeInSection>{contentCard}</FadeInSection>;\n  return <div>{contentCard}</div>;\n};\n\nexport default ProjectCard;\n","import React from \"react\";\nimport ProjectCard from \"./ProjectCard\";\n\nconst ProjectCards = ({ projectNodes }) => {\n  return (\n    <>\n      {projectNodes.map(({ frontmatter, html }, i) => {\n        const { githubRepo, postmanDocs, siteLink } = frontmatter;\n        return (\n          <ProjectCard\n            githubRepo={githubRepo}\n            siteLink={siteLink}\n            postmanDocs={postmanDocs}\n            content={html}\n            key={i}\n            fadeIn={i}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default ProjectCards;\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport ProjectCards from \"../components/ProjectCards\";\nimport PageLayout from \"../components/PageLayout\";\n\nconst IndexPage = ({ data }) => {\n  const markdownNodes = data.allMarkdownRemark.nodes;\n  const projects = markdownNodes\n    .filter((node) => !!node.fileAbsolutePath.match(/.*\\/projects\\/.*\\.md$/))\n    .sort((a, b) => a.frontmatter.orderIndex - b.frontmatter.orderIndex);\n  return (\n    <PageLayout>\n      <ProjectCards projectNodes={projects} />\n    </PageLayout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark {\n      nodes {\n        frontmatter {\n          githubRepo\n          orderIndex\n          postmanDocs\n          siteLink\n        }\n        fileAbsolutePath\n        html\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}